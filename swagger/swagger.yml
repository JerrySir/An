swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /trip/wxmp/create:
    get:
      tags:
      - trip
      description: create a new trip order
      operationId: TripController.Create
      parameters:
      - in: query
        name: Headers{auth-token}
        description: The user login token
        required: true
        type: string
      responses:
        "200":
          description: '{code: int, msg: string, ordernumber: string} get unfinished
            success'
        "403":
          description: '{code: int, msg: string} create new trip order fail'
  /trip/wxmp/unfinished:
    get:
      tags:
      - trip
      description: get unfinished trip
      operationId: TripController.Unfinished
      parameters:
      - in: query
        name: Headers{auth-token}
        description: The user login token
        required: true
        type: string
      responses:
        "200":
          description: '{code: int, msg: string, ordernumber: string} get unfinished
            success'
        "403":
          description: '{code: int, msg: string} get unfinished fail'
  /user/wxmp/login:
    get:
      tags:
      - user
      description: WXMP user login
      operationId: UserController.WXMPLogin
      parameters:
      - in: query
        name: code
        description: The wx code for login
        required: true
        type: string
      - in: query
        name: nickname
        description: The user's nickname
        required: true
        type: string
      - in: query
        name: avatarurl
        description: The user's avatarurl
        required: true
        type: string
      responses:
        "200":
          description: '{code: int, msg: string, token: string} regist success'
        "403":
          description: '{code: int, msg: string} regist fail'
definitions:
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
- name: trip
  description: |
    Operations about Users
