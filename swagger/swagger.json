{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/object/": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "get all objects",
                "operationId": "ObjectController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "post": {
                "tags": [
                    "object"
                ],
                "description": "create object",
                "operationId": "ObjectController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The object content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} models.Object.Id"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/object/{objectId}": {
            "get": {
                "tags": [
                    "object"
                ],
                "description": "find object by objectid",
                "operationId": "ObjectController.Get",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "the objectid you want to get",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "object"
                ],
                "description": "update the object",
                "operationId": "ObjectController.Update",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectid you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Object"
                        }
                    },
                    "403": {
                        "description": ":objectId is empty"
                    }
                }
            },
            "delete": {
                "tags": [
                    "object"
                ],
                "description": "delete the object",
                "operationId": "ObjectController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "objectId",
                        "description": "The objectId you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "objectId is empty"
                    }
                }
            }
        },
        "/trip/wxmp/create": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "create a new trip order",
                "operationId": "TripController.CreateTrip",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string, ordernumber: string} get unfinished success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} create new trip order fail"
                    }
                }
            }
        },
        "/trip/wxmp/finished": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get all finished trip",
                "operationId": "TripController.GetAllFinishedTrip",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} get all finished trip success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get all finished trip fail"
                    }
                }
            }
        },
        "/trip/wxmp/follow/add": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "add follow",
                "operationId": "TripController.AddFollow",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} add follow success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} add follow fail"
                    }
                }
            }
        },
        "/trip/wxmp/follow/follower": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get all follower",
                "operationId": "TripController.GetAllFollower",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} get all follower success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get all follower fail"
                    }
                }
            }
        },
        "/trip/wxmp/follow/following": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get all following",
                "operationId": "TripController.GetAllFollowing",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} get all following success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get all following fail"
                    }
                }
            }
        },
        "/trip/wxmp/follow/remove": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "remove follow",
                "operationId": "TripController.RemoveFollow",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} remove follow success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} remove follow fail"
                    }
                }
            }
        },
        "/trip/wxmp/follow/state": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get follow state",
                "operationId": "TripController.GetFollowState",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string, isfollow: string} get follow state success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get follow state fail"
                    }
                }
            }
        },
        "/trip/wxmp/info": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get a trip info (last updated location)",
                "operationId": "TripController.GetTripInfo",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ordernumber",
                        "description": "The trip's ordernumber",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} get trip's info success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get trip's info fail"
                    }
                }
            }
        },
        "/trip/wxmp/polyline": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get trip polyline",
                "operationId": "TripController.GetTripPolyline",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ordernumber",
                        "description": "The trip ordernumber",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageno",
                        "description": "Get the page of No.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "in": "query",
                        "name": "pagesize",
                        "description": "Get the page of size",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} get trip polyline success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get trip polyline fail"
                    }
                }
            }
        },
        "/trip/wxmp/stop": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "stop a trip order",
                "operationId": "TripController.StopTrip",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "ordernumber",
                        "description": "The trip's ordernumber",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string} stop a trip order success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} stop a trip order fail"
                    }
                }
            }
        },
        "/trip/wxmp/unfinished": {
            "get": {
                "tags": [
                    "trip"
                ],
                "description": "get unfinished trip",
                "operationId": "TripController.Unfinished",
                "parameters": [
                    {
                        "in": "query",
                        "name": "Headers{auth-token}",
                        "description": "The user login token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string, ordernumber: string} get unfinished success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} get unfinished fail"
                    }
                }
            }
        },
        "/user/wxmp/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "WXMP user login",
                "operationId": "UserController.WXMPLogin",
                "parameters": [
                    {
                        "in": "query",
                        "name": "code",
                        "description": "The wx code for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "nickname",
                        "description": "The user's nickname",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "avatarurl",
                        "description": "The user's avatarurl",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{code: int, msg: string, token: string} regist success"
                    },
                    "403": {
                        "description": "{code: int, msg: string} regist fail"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Object": {
            "title": "Object",
            "type": "object",
            "properties": {
                "ObjectId": {
                    "type": "string"
                },
                "PlayerName": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "tags": [
        {
            "name": "object",
            "description": "Operations about object\n"
        },
        {
            "name": "user",
            "description": "Operations about Users\n"
        },
        {
            "name": "trip",
            "description": "Operations about Users\n"
        }
    ]
}